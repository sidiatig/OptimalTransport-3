A
A <- matrix(c(1,0,0,1,0,0,0,0,0),6,9)
A
A <- matrix(c(1,0,0,1,0,0,0,0,0),
c(1,0,0,1,0,0,0,0,0),6,9)
A <- matrix(c(1,0,0,1,0,0,0,0,0),
c(1,0,0,1,0,0,0,0,0),2,9)
?matrix
A = matrix(
c(2, 4, 3, 1, 5, 7), # the data elements
nrow=2,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)
A
A = matrix(
c(2, 4, 3, 1, 5, 7), # the data elements
nrow=6,              # number of rows
ncol=9,              # number of columns
byrow = TRUE)
A
A = matrix(
c(1,1,1,0,0,0,0,0,0), # the data elements
nrow=6,              # number of rows
ncol=9,              # number of columns
byrow = TRUE)
A
A = matrix(
c(1,1,1,0,0,0,0,0,0,
0,0,0,1,1,1,0,0,0), # the data elements
nrow=6,              # number of rows
ncol=9,              # number of columns
byrow = TRUE)
A
A = matrix(
c(1,1,1,0,0,0,0,0,0,
0,0,0,1,1,1,0,0,0,
0,0,0,0,0,0,1,1,1,
1,0,0,1,0,0,1,0,0,
0,1,0,0,1,0,0,1,0,
0,0,1,0,0,1,0,0,1), # the data elements
nrow=6,              # number of rows
ncol=9,              # number of columns
byrow = TRUE)
A
?quadprog
??quadprog
??solve.QP
solve.QP(Dmat,dvec,Amat,bvec=bvec)
library(quadprog)
Dmat       <- matrix(0,3,3)
diag(Dmat) <- 1
dvec       <- c(0,5,0)
Amat       <- matrix(c(-4,-3,0,2,1,0,0,-2,1),3,3)
bvec       <- c(-8,2,0)
solve.QP(Dmat,dvec,Amat,bvec=bvec)
mue_x = c(0.5,0.5)
mue_y = c(0.5,0.5)
b <- c(0.5,0.5,0.5,0.5, 0.5,0.5,0.5,0.5)
b <- c(0.5,0.5,0.5,0.5, -0.5,-0.5,-0.5,-0.5, 1,-1, 1,-1)
mue_x = c(0.5,0.5)
mue_y = c(0.5,0.5)
b <- c(0.5,0.5,0.5,0.5, 1,1,  -0.5,-0.5,-0.5,-0.5, -1,-1)
A = matrix(
c(1,1,0,0,0,0,
0,0,1,1,0,0,
1,0,1,0,0,0,
0,1,0,1,0,0,
0,0,0,0,1,0,
0,0,0,0,0,1,
-1,-1,0,0,0,0,
0,0,-1,-1,0,0,
-1,0,-1,0,0,0,
0,-1,0,-1,0,0,
0,0,0,0,-1,0,
0,0,0,0,0,-1), # the data elements
nrow=12,              # number of rows
ncol=6,              # number of columns
byrow = TRUE)
A
D = matrix(
D = matrix(
c(0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,1), # the data elements
nrow=6,              # number of rows
ncol=6,              # number of columns
byrow = TRUE)
D
D = matrix(
c(0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,1), # the data elements
nrow=6,              # number of rows
ncol=6,              # number of columns
byrow = TRUE)
D
b_0 <- c(0.5,0.5,0.5,0.5, 1,1,  -0.5,-0.5,-0.5,-0.5, -1,-1)
dvec = c(rep(0,6))
dvec
solve.QP(D,dvec,A,bvec=b_0)
library(quadprog)
solve.QP(D,dvec,A,bvec=b_0)
A
solve.QP(D,dvec,A,bvec=b_0)
dvec = c(rep(0,12))
dvec
solve.QP(D,dvec,A,bvec=b_0)
dvec = c(rep(0,6))
dvec
solve.QP(D,dvec,A,bvec=b_0)
b_0
solve.QP(D,dvec,t(A),bvec=b_0)
D
is.positive.definit
is.positive.definite
is.positive.definite(D)
?is.positive.definite(D)
library(math)
library(matrixcalc)
install.packages("matrixcalc")
library(matrixcalc)
is.positive.definite(D)
Dmat       <- matrix(0,3,3)
is.positive.definite(Dmat)
Dmat       <- matrix(1,3,3)
is.positive.definite(Dmat)
Dmat <- diag(Dmat)
is.positive.definite(Dmat)
Dmat       <- matrix(1,3,3)
Dmat <- diag(Dmat)
Dmat
diag(Dmat) <- 1
Dmat       <- matrix(1,3,3)
diag(Dmat) <- 1
is.positive.definite(Dmat)
Dmat       <- matrix(0,3,3)
diag(Dmat) <- 1
is.positive.definite(Dmat)
simplex
?simplex
??simplex
install.packages("simplex")
install.packages("boot")
library(boot)
a <- c(2500, 3500)
A2 <- matrix(c(50, 150, 500, 250), ncol=2, nrow=2, byrow=TRUE)
b2 <- c(900, 2500)
simplex(a, A2 = A2, b2 = b2, maxi=FALSE)
library(linprog)
install.packages("linprog")
library(linprog)
maximum=FALSE, const.dir=c(">=",">="))
solveLP(cvec = a, bvec = b, Amat = A,
maximum=FALSE, const.dir=c(">=",">="))
A <- matrix(c(-50,-150,-500,-250),nrow=2,ncol=2,byrow=TRUE)
a <- c(2500, 3500)
b <- c(-900, -2500)
solveLP(a,b,A,maximum=FALSE)
a <- c(2500, 3500)
A2 <- matrix(c(50, 150, 500, 250), ncol=2, nrow=2, byrow=TRUE)
b2 <- c(900, 2500)
simplex(a, A2 = A2, b2 = b2, maxi=FALSE)
A <- matrix(c(-50,-150,-500,-250),nrow=2,ncol=2,byrow=TRUE)
a <- c(2500, 3500)
b <- c(-900, -2500)
solveLP(a,b,A,maximum=FALSE)
A = matrix(
c(1,1,0,0,0,0,
0,0,1,1,0,0,
1,0,1,0,0,0,
0,1,0,1,0,0,
0,0,0,0,1,0,
0,0,0,0,0,1,
-1,-1,0,0,0,0,
0,0,-1,-1,0,0,
-1,0,-1,0,0,0,
0,-1,0,-1,0,0,
0,0,0,0,-1,0,
0,0,0,0,0,-1), # the data elements
nrow=12,              # number of rows
ncol=6,              # number of columns
byrow = TRUE)
a <- c(0,0,0,0,1,1)
b_0 <- c(0.5,0.5,0.5,0.5, 1,1,  -0.5,-0.5,-0.5,-0.5, -1,-1)
solveLP(a,b_0,A,maximum=FALSE)
sol <- solveLP(a,b_0,A,maximum=FALSE)
sol
A <- matrix(c(-50,-150,-500,-250),nrow=2,ncol=2,byrow=TRUE)
a <- c(2500, 3500)
b <- c(-900, -2500)
solveLP(a,b,A,maximum=FALSE)
A = matrix(
c(1,1,0,0,0,0,
0,0,1,1,0,0,
1,0,1,0,0,0,
0,1,0,1,0,0,
0,0,0,0,1,0,
0,0,0,0,0,1,
-1,-1,0,0,0,0,
0,0,-1,-1,0,0,
-1,0,-1,0,0,0,
0,-1,0,-1,0,0,
0,0,0,0,-1,0,
0,0,0,0,0,-1), # the data elements
nrow=12,              # number of rows
ncol=6,              # number of columns
byrow = TRUE)
a <- c(0,0,0,0,1,1)
b_0 <- c(0.5,0.5,0.5,0.5, 1,1,  -0.5,-0.5,-0.5,-0.5, -1,-1)
sol <- solveLP(a,b_0,A,maximum=FALSE)
sol
sol.opt
sol$opt
sol$opt
sol <- solveLP(a,b_0,A,maximum=FALSE)
sol
sol[0,]
sol[0,0]
sol[1,1]
sol[]
sol$solution
setwd("/home/willy/8.Semester/Liebscher/OptimalTransport/MatchingMeasures/")
write.table(mat, file="mymatrix.txt", row.names=FALSE, col.names=FALSE)
write.table(sol$solution, file="mymatrix.txt", row.names=FALSE, col.names=FALSE)
out = matrix(sol$solution, nrow=2, ncol=2)
setwd("/home/willy/8.Semester/Liebscher/OptimalTransport/MatchingMeasures/")
write.table(sol$solution, file="mymatrix.txt", row.names=FALSE, col.names=FALSE)
write.table(out, file="mymatrix.txt", row.names=FALSE, col.names=FALSE)
write.table(out, file="mymatrix.txt", row.names=FALSE, col.names=FALSE, sep = ";")
tree <- read.table("./PointClouds/pc1.txt", header=TRUE)
tree <- read.table("../PointClouds/pc1.txt", header=TRUE)
tree
tree <- read.table("../PointClouds/pc1.txt", header=TRUE, sep = ";")
tree
tree <- read.table("../PointClouds/pc1.txt", header=FALSE, sep = ";")
tree
tree <- read.table("../PointClouds/pc1.txt", header=TRUE, sep = ";")
tree
tree <- read.table("../PointClouds/pc1.txt", header=FALSE, sep = ";")
tree
pointCloud1 <- read.table("../PointClouds/pc1.txt", header=FALSE, sep = ";")
pointCloud1
pointCloud1[0]
pointCloud1$V1
xDistances <- matrix(0,pointCloud1$V1)
size(pointCloud1$V1)
length(pointCloud1$V1)
xDistances <- matrix(0,length(pointCloud1$V1))
xDistances
xDistances <- matrix(0,length(pointCloud1$V1), length(pointCloud1$V1))
xDistances
# Calculate all pairwise distances. Leave out distance to itself
xDistances <- matrix(0,length(pointCloud1$V1)-1, length(pointCloud1$V1)-1)
xDistances
pointNum = length(pointCloud1$V1)
xDistances <- matrix(0,pointNum-1, pointNum-1)
for(i in 1:pointNum-1){
}
xDistances <- matrix(0,pointNum, pointNum)
for(i in 1:pointNum-1){
}
d = sqrt(dx*dx + dy*dy)
dx = x1-x2
dy = y1-y2
d = sqrt(dx*dx + dy*dy)
distance <- function(x1,y1,x2,y2){
dx = x1-x2
dy = y1-y2
d = sqrt(dx*dx + dy*dy)
return(d)
}
xDistances <- matrix(0,pointNum, pointNum)
for(i in 1:pointNum-1){
for(j in i:pointNum){
xDistances[i,j] = distance(pointCloud1$V1[i],pointCloud1$V1[j],
pointCloud1$V2[i],pointCloud1$V2[j])
}
}
xDistances
xDistances <- matrix(0,pointNum, pointNum)
for(i in 1:pointNum-1){
for(j in i:pointNum){
xDistances[i,j] = distance(pointCloud1$V1[i],pointCloud1$V1[j],
pointCloud1$V2[i],pointCloud1$V2[j])
}
}
xDistances
pointCloud1 <- read.table("../PointClouds/pc1.txt", header=FALSE, sep = ";")
pointNum = length(pointCloud1$V1)
# Calculate all pairwise distances
xDistances <- matrix(0,pointNum, pointNum)
for(i in 1:pointNum-1){
for(j in i:pointNum){
xDistances[i,j] = distance(pointCloud1$V1[i],pointCloud1$V1[j],
pointCloud1$V2[i],pointCloud1$V2[j])
}
}
xDistances
for(i in 1:pointNum-1){
for(j in i+1:pointNum){
xDistances[i,j] = distance(pointCloud1$V1[i],pointCloud1$V1[j],
pointCloud1$V2[i],pointCloud1$V2[j])
}
}
xDistances
for(i in 0:pointNum-1){
for(j in i+1:pointNum){
xDistances[i,j] = distance(pointCloud1$V1[i],pointCloud1$V1[j],
pointCloud1$V2[i],pointCloud1$V2[j])
}
}
for(i in 1:pointNum-1){
for(j in 1:pointNum){
xDistances[i,j] = distance(pointCloud1$V1[i],pointCloud1$V1[j],
pointCloud1$V2[i],pointCloud1$V2[j])
}
}
xDistances
xDistances <- matrix(0,pointNum, pointNum)
xDistances
for(i in 1:pointNum){
for(j in 1:pointNum){
xDistances[i,j] = distance(pointCloud1$V1[i],pointCloud1$V1[j],
pointCloud1$V2[i],pointCloud1$V2[j])
}
}
xDistances
distance(0,0,2,2)
distance(0,0,2,0)
pointCloud1$V1
pointCloud1$V2
distance(400,7,400,7)
for(i in 1:pointNum){
for(j in 1:pointNum){
xDistances[i,j] = distance(pointCloud1$V1[i],pointCloud1$V2[i],
pointCloud1$V1[j],pointCloud1$V2[j])
}
}
xDistances <- matrix(0,pointNum, pointNum)
for(i in 1:pointNum){
for(j in 1:pointNum){
xDistances[i,j] = distance(pointCloud1$V1[i],pointCloud1$V2[i],
pointCloud1$V1[j],pointCloud1$V2[j])
}
}
distance(400,7,400,7)
xDistances
for(i in 1:pointNum-1){
for(j in i+1:pointNum){
xDistances[i,j] = distance(pointCloud1$V1[i],pointCloud1$V2[i],
pointCloud1$V1[j],pointCloud1$V2[j])
}
}
createDistMatrix <- function(X,Y){
pointNum = length(X)
xDistances <- matrix(0,pointNum, pointNum)
for(i in 1:pointNum){
for(j in 1:pointNum){
xDistances[i,j] = distance(X[i],Y[i],
X[j],Y[j])
}
}
return(xDistances)
}
xDistances <- createDistMatrix(pointCloud1$V1, pointCloud1$V2)
xDistances
pointCloud2 <- read.table("../PointClouds/pc2.txt", header=FALSE, sep = ";")
distances2 <- createDistMatrix(pointCloud2$V1, pointCloud2$V2)
measure = c()
createMeasure <- function(X){
pointNum = length(X)
measure = X
total = sum(X)
for(i in 1:pointNum){
measure = measure[i]/total
}
return(measure)
}
measure2 <- createMeasure(pointCloud2$V3)
measure2
measure1 <- createMeasure(pointCloud1$V3)
measure1
c(10,10)
createMeasure(c(10,10))
sum(c(10,10))
pointNum = length(pointCloud1$V3)
measure = pointCloud1$V3
total = sum(X)
total = sum(pointCloud1$V3)
for(i in 1:pointNum){
measure = measure[i]/total
}
measure
measure = pointCloud1$V3
measure
createMeasure <- function(X){
pointNum = length(X)
measure = X
total = sum(X)
for(i in 1:pointNum){
measure[i] = measure[i]/total
}
return(measure)
}
createMeasure(c(10,10))
measure1 <- createMeasure(pointCloud1$V3)
measure2 <- createMeasure(pointCloud2$V3)
measure2
measure1
b_0 = c(measure1,measure2)
b_0
b_0 = c(measure1,measure2, distances1[1,1])
distances1 <- createDistMatrix(pointCloud1$V1, pointCloud1$V2)
b_0 = c(measure1,measure2, distances1[1,1])
b_0
distances1
b_0 = c(measure1,measure2, distances1[2,2])
b_0
distances1 <- createDistMatrix(pointCloud1$V1, pointCloud1$V2)
b_0 = c(measure1,measure2, distances1[2,2])
b_0
distances1[2,2]
distances1[1,1]
distances1[1,2]
distances1
b_0 = c(measure1,measure2, distances1[1,2])
b_0
b_0 = c(measure1,measure2, distances1[1,2], distances2[1,2],
-measure1,-measure2, -distances1[1,2], -distances2[1,2])
b_0
b_0 = c(measure1,measure2, distances1[1,2], distances2[1,2],
-measure1,-measure2, -distances1[1,2], -distances2[1,2])
A = matrix(
c(1,1,0,0,0,0,
0,0,1,1,0,0,
1,0,1,0,0,0,
0,1,0,1,0,0,
0,0,0,0,1,0,
0,0,0,0,0,1,
-1,-1,0,0,0,0,
0,0,-1,-1,0,0,
-1,0,-1,0,0,0,
0,-1,0,-1,0,0,
0,0,0,0,-1,0,
0,0,0,0,0,-1), # the data elements
nrow=12,              # number of rows
ncol=6,              # number of columns
byrow = TRUE)
a <- c(0,0,0,0,1,1)
sol <- solveLP(a,b_0,A,maximum=FALSE)
out = matrix(sol$solution, nrow=2, ncol=2)
write.table(out, file="mymatrix.csv", row.names=FALSE, col.names=FALSE, sep = ";")
write.table(out, file="mymatrix.csv", row.names=FALSE, col.names=FALSE, sep = ";")
source('~/8.Semester/Liebscher/OptimalTransport/Rscripts/LOPgeneral3by3.R')
source('~/8.Semester/Liebscher/OptimalTransport/Rscripts/LOPgeneral3by3.R')
setwd("/home/willy/8.Semester/Liebscher/OptimalTransport/MatchingMeasures/")
pointCloud1 <- read.table("../PointClouds/pc1.txt", header=FALSE, sep = ";")
# Calculate all pairwise distances
distances1 <- createDistMatrix(pointCloud1$V1, pointCloud1$V2)
measure1 <- createMeasure(pointCloud1$V3)
pointCloud2 <- read.table("../PointClouds/pc2.txt", header=FALSE, sep = ";")
# Calculate all pairwise distances
distances2 <- createDistMatrix(pointCloud2$V1, pointCloud2$V2)
measure2 <- createMeasure(pointCloud2$V3)
library(linprog)
b_0 = c(measure1,measure2,
distances1[1,2], distances1[1,3], distances1[2,3],
distances2[1,2], distances2[1,3], distances2[2,3],
-measure1,-measure2,
-distances1[1,2], -distances1[1,3], -distances1[2,3],
-distances2[1,2], -distances2[1,3], -distances2[2,3])
b_0
A = matrix(
c(1,1,1, 0,0,0, 0,0,0, 0,0,0, 0,0,0,
0,0,0, 1,1,1, 0,0,0, 0,0,0, 0,0,0,
0,0,0, 0,0,0, 1,1,1, 0,0,0, 0,0,0,
1,0,0, 1,0,0, 1,0,0, 0,0,0, 0,0,0,
0,1,0, 0,1,0, 0,1,0, 0,0,0, 0,0,0,
0,0,1, 0,0,1, 0,0,1, 0,0,0, 0,0,0,
0,0,0, 0,0,0, 0,0,0, 1,0,0, 0,0,0,
0,0,0, 0,0,0, 0,0,0, 0,1,0, 0,0,0,
0,0,0, 0,0,0, 0,0,0, 0,0,1, 0,0,0,
0,0,0, 0,0,0, 0,0,0, 0,0,0, 1,0,0,
0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,1,0,
0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1,
-1,-1,-1, 0,0,0, 0,0,0, 0,0,0, 0,0,0,
0,0,0, -1,-1,-1, 0,0,0, 0,0,0, 0,0,0,
0,0,0, 0,0,0, -1,-1,-1, 0,0,0, 0,0,0,
-1,0,0, -1,0,0, -1,0,0, 0,0,0, 0,0,0,
0,-1,0, 0,-1,0, 0,-1,0, 0,0,0, 0,0,0,
0,0,-1, 0,0,-1, 0,0,-1, 0,0,0, 0,0,0,
0,0,0, 0,0,0, 0,0,0, -1,0,0, 0,0,0,
0,0,0, 0,0,0, 0,0,0, 0,-1,0, 0,0,0,
0,0,0, 0,0,0, 0,0,0, 0,0,-1, 0,0,0,
0,0,0, 0,0,0, 0,0,0, 0,0,0, -1,0,0,
0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,-1,0,
0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,-1), # the data elements
nrow=24,              # number of rows
ncol=15,              # number of columns
byrow = TRUE)
a <- c(0,0,0, 0,0,0, 0,0,0, 1,1,1, 1,1,1)
sol <- solveLP(a,b_0,A,maximum=FALSE)
out = matrix(sol$solution, nrow=2, ncol=2)
out = matrix(sol$solution, nrow=3, ncol=3)
write.table(out, file="mymatrix.csv", row.names=FALSE, col.names=FALSE, sep = ";")
source('~/.active-rstudio-document')
